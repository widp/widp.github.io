<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on Tejaswi&#39;s blog</title>
    <link>http://localhost:1313/blog/tags/git/</link>
    <description>Recent content in Git on Tejaswi&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 16 Jul 2022 00:00:00 +0530</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/tags/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Disabling SSL while using Git and pip</title>
      <link>http://localhost:1313/blog/posts/ssl_errors_behind_proxy/</link>
      <pubDate>Sat, 16 Jul 2022 00:00:00 +0530</pubDate>
      <guid>http://localhost:1313/blog/posts/ssl_errors_behind_proxy/</guid>
      <description>SSL errors If you get errors like :&#xA;unable to get local issuer certificate error&#xA;or&#xA;Failed to connect to github.com port 443 after 21380 ms: Timed out&#xA;while using git OR&#xA;WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by &amp;lsquo;ConnectTimeoutError&#xA;while using pip , It could mean you are behind a corporate proxy. Behind tools such as ZScaler.&#xA;A quick fix to this (although not the safest way) is to disable ssl for Git</description>
    </item>
    <item>
      <title>Using git with large mono repos</title>
      <link>http://localhost:1313/blog/posts/git_for_mono_repos/</link>
      <pubDate>Thu, 16 Jun 2022 00:00:00 +0530</pubDate>
      <guid>http://localhost:1313/blog/posts/git_for_mono_repos/</guid>
      <description>The following approaches can be used to work with large git repositories. Limit large files from being downloaded.&#xA;using &amp;lsquo;filter&amp;rsquo; So files such as large binaries, zip files won&amp;rsquo;t be downloaded.&#xA;#size in MB git clone --no-checkout --filter=blob:limit=&amp;lt;size&amp;gt; your_git_repo.com Limit git to a set of directories&#xA;This can be done using git &amp;lsquo;sparse checkout&amp;rsquo;&#xA;#inialize empty git repo mkdir your_git_dir; cd your_git_dir git init # set which sub-directory contents you want git sparse-checkout set --cone input-directory #add remote and do a pull git remote add origin my_git_repo.</description>
    </item>
  </channel>
</rss>
